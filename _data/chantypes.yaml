# chantypes.yaml
#
# This file is Copyright (c) 2015-2019 Daniel Oaks
#  <daniel@danieloaks.net>
# This file is Copyright (c) 2001-2004 Simon Butcher
#  <pickle@alien.net.au>
#
# This file is PUBLIC DOMAIN, to benefit the IRC developer community. If you
# modify this file, please state your name and modifications here in order
# for people to be able to distinguish between your version and this version.
#
# For more information or corrections, please contact the author.

file:
    type: "chantypes"
    revision: "1.60"

# The following information is used to create pretty HTML page and tables

page:
    name: Channel Type Prefixes
    extra: >
        <p>
            Red denotes a conflicting numeric definition, gray for deprecated
            (however quite possibly still in use), and blue for OK.
        </p>

table:
    row-id: name

    row-classes:
        - conflict
        - obsolete

    columns:
        -
            name: Prefix
            content: prefixchar
            classes: code center
            inline-link: name
            description: Prefix character
        -
            name: Name
            content: name
            classes: code
            link: information
        -
            name: Origin
            content: origin
            link: contact
            description: Where the prefix came from
        -
            name: Creatable
            content: clientcreate
            classes: center
            description: Can regular clients create this type of channel?
        -
            name: Comments
            content: comment
            seealso: seealso
            description: "Additional comments, history and other details"
            markdown: true


# The following format is used through-out this file. The fields 'name' and
# 'prefixchar' are mandatory, the others may or may not exist.
# 
# The 'clientcreate' field determines whether or not a normal client may
# create a channel of that type. If it's set to no, then the channel must
# be created some other way (such as a service, server, or even an operator).

format:
    name: channel type name
    prefixchar: channel type prefix character
    origin: where the type was found
    when: release version or announced date
    contact: point of contact associated with the type
    information: url where to find more information
    comment: "comments, history etc"
    clientcreate: Y
    conflict: true
    obsolete: true

values:
    -
        name: LOCAL
        prefixchar: "&"
        origin: RFC1459
        comment: >
            This channel type is known only to the server they are created
            on, and as such only clients on that server can join it. Each
            instance of this channel type is contained per server.

        clientcreate: Y

    -
        name: NETWORK
        prefixchar: "#"
        origin: RFC1459
        comment: >
            This channel type is known to all servers that are connected to
            the network.

        clientcreate: Y

    -
        name: NETWORK_SAFE
        prefixchar: "!"
        origin: RFC2811
        comment: >
            These channels work similar to the `'#'` channels, except the name
            is prefixed not only with the `'!'` but also a set of alpha-
            numeric digits. This is an alternative to the time-stamp method
            of avoiding channel-takeovers during network splits.

        clientcreate: Y

    -
        name: NETWORK_UNMODERATED
        prefixchar: "+"
        origin: RFC2811
        comment: >
            These unmoderated channels work almost exactly the same as `'#'`
            channels, except nobody can obtain channel operator status on
            them. Some implementations seem to set the channel mode to `'+nt'`
            upon creation, however most implementations act as if modes `+nt`
            are set but don't announce them as being set.

        clientcreate: Y
